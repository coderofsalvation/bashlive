#!/bin/bash
#
# Copyright (C) 2014, Leon van Kammen (Coder of Salvation)
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
BASHLIVETMP="$(echo ~)/.bashlive/cache"
C_NORMAL="\\033[0;0m"
C_RED="\\033[0;31m"
C_GREEN="\\033[0;32m"
TOKEN="|||"
INTERACTIVE=1
REPOS=("https://raw2.github.com/coderofsalvation/bashlive.repo/master/index.txt")
WEBPIPEINDEXES=("http://neon-semiotics-490.appspot.com")

# root == no good
[[ "$(whoami)" == "root" ]] && { echo "please dont run this as root..thnx"; exit 1; }

#
# some shortcut helper functions
#

isincluded(){
  appname="$(basename -- "$0")"; [[ ! "$appname" == "bashlive" ]] && return 0 || return 1;
}

isincludedbybash(){
  appname="$(basename -- "$0")"; [[ "$appname" == "bash" ]] && return 0 || return 1;
}


scripthasbashlive(){
  grep -E '.*(source|\.) .*bashlive.*' "$1" &>/dev/null; return $?
}

explode(){
  IFS="$1" read -a $2 <<< "$3"
}

iscommand(){
  [[ "$1" == "bashlive::help" ]] || [[ "$1" == "bashlive::get" ]] || [[ "$1" == "bashlive::search" ]] || [[ "$1" == "bashlive::update" ]] && return 0
  return 1
}

cleanup(){
  printf "$C_NORMAL"
}

is_file(){
  [[ -f "$1" ]] && return 0 || return 1
}

is_url(){
  [[ "$1" =~ ^http ]] && return 0 || return 1
}


is_function() {
  type "$1" &>/dev/null && return 0 || return 1
}

is_webpipe(){
  [[ "$1" =~ "/webpipe/" ]] && return 0 || return 1
}

has_shebang(){
  [[ "$1" =~ ^#! ]] && return 0 || return 1
}
  
get_url(){
  grep "$1 " $BASHLIVETMP.index | head -n1 | sed "s/.*$TOKEN//g"
}

multimatch() { 
  awk 'BEGIN{for(i=1;i<ARGC;i++) a[i]=ARGV[i]; ARGC=1} {for (i in a) if ($0 !~ a[i]) next; print}' "$@"
}

function wraplines(){
    cat - | cut -c 1-$(tput cols)
}

is_integer(){
  number=$( echo "$1" | sed 's/^[-+]*[0-9]*//g' ); [[ -z "$number" ]] && return 0 || return 1
}

# bashlive::update() - forces an reset + update of the cache

bashlive::update(){
  rm -rf $BASHLIVETMP* &>/dev/null; bashlive::init 
  printf "$C_GREEN""bashlive>\nbashlive>$C_NORMAL"" to get the latest source run: 'wget https://raw2.github.com/coderofsalvation/bashlive/master/bashlive'$C_NORMAL\n"
}
 
# bashlive::init () - initializes and builds cache if necessary:

bashlive::init(){  
  [[ ! -d "$BASHLIVETMP" ]] && mkdir -p "$BASHLIVETMP"
  [[ ! -f $BASHLIVETMP.index.readable ]] && bashlive::gencache 
  bashlive::loadwebpipes
  [[ -f $BASHLIVETMP.alias   ]] && source $BASHLIVETMP.alias
}

# bashlive::loadwebpipes() - loads webpipe.bash to cache

bashlive::loadwebpipes(){
  [[ ! -f "$BASHLIVETMP/bash/app/network/webpipe" ]] && {
    url="$(get_url /bash/app/network/webpipe)"; 
    data="$(curl -L -s "$url")";
    bashlive::savecache "$data" "/bash/app/network/webpipe"
  }
}

# bashlive::initwebpipes() - indexes the webpipes

bashlive::initwebpipes(){
  for webpipeindex in "${WEBPIPEINDEXES[@]}"; do webpipe::index "$webpipeindex" &>/dev/null; done 
}

# bashlive::gencache() - builds cache

bashlive::gencache(){
  :>$BASHLIVETMP.index
  for repo in "${REPOS[@]}"; do 
    printf "$C_GREEN""bashlive>$C_NORMAL indexing '$repo' into /tmp\n"; index="$(curl -L -s "$repo")"; [[ $? == 1 ]] && echo "failed" && continue 
    echo "$index" | tail -n+3 >> $BASHLIVETMP.index; 
  done
  cat $BASHLIVETMP.index | sed 's/'"$TOKEN"'.*//g' > $BASHLIVETMP.index.readable
  bashlive::loadwebpipes
  printf "$C_GREEN""bashlive>$C_NORMAL done ($(cat $BASHLIVETMP.index | wc -l) items were indexed)\n"; return 0
}

# bashlives() - shows all bashlive items from the repo

bashlives(){
  printf "$C_GREEN""the following bashlive's are available: $C_NORMAL\n\n"
  cat $BASHLIVETMP.index.readable | cut -c 1-$(tput cols) | more 
  echo ""; 
  #bashlive::console;
}

# integer2bashlivepath() - converts a number into a bashlive path
# @param string number 
  
integer2bashlivepath(){
  grep "^$1 .*" $BASHLIVETMP.index | sed 's/^[0-9]\+ //g' | trim | sed 's/ .*//g'
}

# bashlive::tryget() - takes an number or bashlivepath as input, and tries to get the item
# @param string number or bashlivepath

bashlive::tryget(){
  integer=$(echo "$1" | grep "^-\?[0-9]*$")
  (( "${#integer}" > 0 )) || bashlive::get "$1"
  bashlive::get "$( integer2bashlivepath $integer )"
  # isincluded || bashlive::console # dont do bashlive::console when sourced by bash
}

# remove leading and trailing whitespaces
# usage: echo " foo bar " | trim 
 
trim(){
   cat - | sed -e 's/^ *//g' -e 's/ *$//g'
}

# checkinteractive() - checks if noninteractive mode should be triggered (if ':' is present in the bashlive path)

checkinteractive(){
  arg="$1"; [[ "$arg" =~ \!$ ]] && INTERACTIVE=0 || INTERACTIVE=1
}

# trysourcewebpipe() - tries to source a webpipe
# @params string bashlive webpipe path

trysourcewebpipe(){
  # first make sure webpipe is sourced 
  if ! is_function "webpipe::set"; then 
    url="$(get_url /bash/app/network/webpipe)"; 
    data="$(curl -L -s "$url")";
    bashlive::savecache "$data" "/bash/app/network/webpipe"
    [[ $? == 0 ]] && INTERACTIVE=0 dosource "$data" "" "/bash/app/network/webpipe";
  fi
  webpipe::set webpipe "$(get_url "$1")" && printf "$C_GREEN""bashlive>""$C_NORMAL connected webpipe, you can now run '$(basename "$1") --help'\n" 
}

# bashlive::get() - *the* most important function which sources, bakes, caches a bashlivepath

bashlive::get(){
  arg="${1/\!/}"; [[ ${#arg} == 0 ]] && { echo "bashlive usage: / <searchterm- or bashlive path/index>"; return 0; }
  is_file "$arg" && scripthasbashlive "$arg" && bashlive::bake "$arg"     # bake into file
  ! is_integer "$arg" && ! is_url "$arg" && [[ ! "$1" =~ ^/ ]] && { bashlive::search "$@"; return 0; } # search if no path given
  checkinteractive "$1"; arg="${1/\!/}" # very strange, why does the '!' gets inserted into $arg again?
  is_url "$arg" && data="$arg" || url="$(get_url "$arg")"
  [[ ${#url} == 0 ]] && { printf "$C_RED""bashlive '$arg' not found $C_NORMAL\n"; return 1; }
  is_integer "$arg" && path="$(integer2bashlivepath $arg)" || path="$arg"
  is_webpipe "$path" && { trysourcewebpipe "$path"; return 0; } 
  cachefile="$BASHLIVETMP$path"
  [[ -f "$cachefile" ]] && source "$cachefile" && return 0 # re-use cache, dont source twice
  content="$(curl -L -s "$url")" || { printf "$C_RED""could not retrieve bashlive url '$data'$C_NORMAL\n"; return 1; }
  echo "$url"
  [[ $INTERACTIVE == "0" ]] || { printf "\n%s\n%s\n\n" "# source: ${url/\/raw*/}" "$content"; } | more | highlightcode
  trysource "$content" "$url" "$path" && bashlive::savecache "$content" "$path"
}
/(){ bashlive::get "$@"; } # alias

# bashlive::savecache() - saves a bashlivepath and its contents to the local cache (handy for bashlive::bake)
# @param string the code
# @param string the bashlivepath

bashlive::savecache(){
  content="$1"; path="$2"
  [[ ${#path} == 0 ]] && { echo "invalid path"; return 1; }
  [[ ! -d "$BASHLIVETMP" ]] && { echo "invalid bashlivetmp path"; return 1; }
  file="$BASHLIVETMP""$path"; dir="$(dirname "$file")";
  mkdir -p "$dir" &>/dev/null
  echo "$content" > "$file" # save to cachedir 
}

# highlights keywords in bashcode script
# @param backgroundcolorcode
# @param foregroundcolorcode

highlightcode(){
  GREP_COLOR='$1;$2' 
  cat - | grep -E --color 'usage|@param |@|$|http.*|sudo |su |curl |wget |bash |sh |if |then |while |for |do |\{|}|\|\||&&|$'
}

# dosource() - does an (interactive) sourcing of given code
# @param string code
# @param string url
# @param string path 
  
dosource(){  
  [[ $INTERACTIVE == "1" ]] && { 
    printf "$C_GREEN"; read -p "source? (y/n) " write; printf "$C_NORMAL"; 
    [[ ! "$write" == "y" ]] && return 0;
  } || printf "$C_GREEN""bashlive>""$C_NORMAL sourcing livebash $C_NORMAL'$3'\n" 1>&2;
  eval "${1/exit/return}"; 
  return 0 # replace 'exit'-calls with returns, and continue, even if errored
}

# trysource - tries to source, save or clone a repository based on the cod3
# @param string content/code
# @param string url
# @param string bashlivepath

trysource(){
  content="$1"; url="$2"; path="$3"; app="$(basename -- "$0" )";
  checkdependencies "$content" || return 0
  has_shebang "$1" && [[ ! -n $FORCE_SOURCE ]] && echo "$1" > "$(basename -- "$path")" && {
    chmod 755 "$(basename -- "$path")";
    printf "$C_GREEN""downloading bash app $C_NORMAL'./$(basename -- "$path")'\n"
    return 0
  }
  isincluded && [[ ! "$path" =~ "oneliner" ]] && dosource "$content" "$url" "$path" && return 0; # dont ask  when sourced by /bin/bash
}

# checkdependancies() - checks if programs are present on local system which are defined in code by '@dependacny
# @params string code

checkdependencies(){
  depends="$(echo "$1" | sed 's/@dependancy/@dependancies/g' | grep -E "@dependencies " | sed 's/.*dependencies //g' )"
  (( ${#depends} == 0 )) && return 0
  for depend in $depends; do 
    which $depend &>/dev/null || { printf "$C_RED[!] please install '$depend' first $C_NORMAL\n"; return 1; }
  done
  return 0
}

# bashlive::bake() - will replace all bashlivepaths in a file with the actual content ('baking')
# @params string file

bashlive::bake(){
  file="$(readlink -f "$1")"; 
  scripthasbashlive "$file" || { printf "$C_RED""could not find 'source bashlive' in your script :($C_NORMAL\n"; return 1; }
  read -p "bake bashlive into script? (y/n)" bake
  grep -E "^/ /.*" "$file" | sed 's/!//g' > $BASHLIVETMP.paths
  while read bashlivepath; do 
    path="${bashlivepath/\/ /}"
    cachefile="$BASHLIVETMP$path"
    if [[ -f "$cachefile" ]]; then code="$( echo -e "$code\n"; cat "$cachefile")"; else
      printf "$C_RED""bashdown> cannot find '$cachefile' (please run the application first to build cache) $C_NORMAL \n"; return 1; 
    fi
  done < $BASHLIVETMP.paths
  { IFS=''; cat "$file" | while read line; do
     [[ "$line" =~ ^"/ /" ]] && continue;
     if [[ "$line" =~ ". " ]] && [[ "$line" =~ "bashlive" ]]; then printf "\n%s\n" "$code"; else echo "$line"; fi
   done
  } > $BASHLIVETMP.insert;
  echo "bashlive> writing backup to $BASHLIVETMP.backup"; cp "$file" "$BASHLIVETMP.backup";
  cp "$BASHLIVETMP.insert" "$file" || { printf "$C_RED""could not copy '$BASHLIVETMP.insert' to '$file' :($C_NORMAL\n"; return 1; }
}

# bashlive::usage() - shows the helpscreen 

bashlive::usage(){
  TEXT='
  subcommands:
    
    bashlives                   list all bashlives
    bashlive::search <keyword>  search for bashlives which match keyword
    bashlive::update            refresh the (repo)list of bashlives 
    bashlive::get <path>        print a bashlive (and optionally include it in your script)
    <number>                    print bashlive with given index (printed by "ls" or "bashlive::search")
'
  echo "$TEXT"
}
bashlive::help(){ bashlive::usage; } # alias

# bashlive::console() - starts an interactive console

bashlive::console(){
  printf "$C_GREEN""bashlive> $C_NORMAL"; read -p "" cmd;
  [[ "${#cmd}" == 0 ]] && return 0 # exit on enter 
  # check if command is entered, or in case of an integer call get
  iscommand "${cmd/ */}" && ${cmd} || bashlive::tryget "$cmd"
}

# bashlive::search() - searches the local cache 

bashlive::search(){
  args="$*"; bashlive::init; cat $BASHLIVETMP.index.readable | multimatch "$@" | wraplines | more | grep -E "${args// /|}"
  # [[ -n $INCLUDED ]] && bashlive::console
}

# _bashlive_autocomplete() - the bash autocomplete function

_bashlive_autocomplete(){ #  By convention, the function name  starts with an underscore.
  bashlive::init; local cur
  # Pointer to current completion word.
  # By convention, it's named "cur" but this isn't strictly necessary.

  COMPREPLY=()   # Array variable storing the possible completions.
  cur=${COMP_WORDS[COMP_CWORD]}
  case "$cur" in
    *) 
       items="$( cat $BASHLIVETMP.index.readable | sed 's/^[0-9]\+ //g' | trim | sed 's/ .*//g' | sed ':a;N;$!ba;s/\n/ /g' )"
       #explode $'\n' "COMPREPLY" "$(cat $BASHLIVETMP.index.readable | sed 's/^[0-9]\+ //g' )"
       COMPREPLY=( $( compgen -W "$items" -- $cur ) )
       ;;
  esac

  return 0
}

which sed grep awk which &>/dev/null || { echo "bashlive needs at least the following utilities: sed grep awk which"; }
[[ "$(basename -- "$0" )" != "bashlive" ]] && INCLUDED=1 || { echo "just type 'source $0' to enjoy bashlive"; exit; }
complete -F _bashlive_autocomplete / # initialization of autompletion
trap cleanup SIGTERM 2 3 15
isincludedbybash && {
  bashlive::init
  [[ -f"$BASHLIVETMP/bash/app/network/webpipe" ]] && source "$BASHLIVETMP/bash/app/network/webpipe" && bashlive::initwebpipes
  printf "$C_GREEN""bashlive>$C_NORMAL %s\n" "type '/' + space and tab-away for online completion." 1>&2;
} 
